{"version":3,"sources":["assets/img/brand/logo.svg","assets/img/brand/dashboard.svg","containers/DefaultLayout/DefaultHeader.js"],"names":["module","exports","__webpack_require__","p","DefaultHeader","badge","classes","classNames","class","react__WEBPACK_IMPORTED_MODULE_5___default","a","createElement","reactstrap__WEBPACK_IMPORTED_MODULE_7__","className","color","variant","text","url","substring","item","key","itemIcon","icon","itemBadge","this","navBadge","attributes","disabled","Object","assign","href","link","name","isExternal","active","react_router_dom__WEBPACK_IMPORTED_MODULE_8__","to","activeClassName","onClick","hideMobile","title","header","tag","_this","_this$props","props","navs","rightNavs","showToggle","openAside","processes","length","Fragment","_coreui_react__WEBPACK_IMPORTED_MODULE_9__","display","mobile","full","src","logo","width","height","alt","minimized","sygnet","navbar","map","index","concat","navLink","filter","type","dropdownItems","children","dropdownLink","direction","nav","avatar","right","style","defaultOpen","Component","defaultProps"],"mappings":"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","file":"static/js/4.da674d76.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5f9c6457.svg\";","module.exports = __webpack_public_path__ + \"static/media/dashboard.8f62be06.svg\";","import React, { Component } from 'react';\nimport classNames from 'classnames';\nimport {\n    Badge,\n    DropdownItem,\n    DropdownMenu,\n    DropdownToggle,\n    Nav,\n    NavItem,\n    NavLink as RsNavLink,\n} from 'reactstrap';\nimport PropTypes from 'prop-types';\nimport { NavLink } from 'react-router-dom';\nimport {\n    AppAsideToggler,\n    AppHeaderDropdown,\n    AppNavbarBrand,\n    AppSidebarToggler,\n} from '@coreui/react';\nimport logo from '../../assets/img/brand/logo.svg';\nimport sygnet from '../../assets/img/brand/dashboard.svg';\n\nconst propTypes = {\n    children: PropTypes.node,\n    navs: PropTypes.array,\n};\n\nconst defaultProps = {\n    processes: []\n};\n\nclass DefaultHeader extends Component {\n    navBadge(badge) {\n        if (badge) {\n            const classes = classNames(badge.class);\n            return (\n                <Badge className={classes} color={badge.variant}>\n                    {badge.text}\n                </Badge>\n            );\n        }\n        return null;\n    }\n    isExternal(url) {\n        const link = url ? url.substring(0, 4) : '';\n        return link === 'http';\n    }\n    navLink(item, key, classes) {\n        const url = item.url || '';\n        const itemIcon = <i className={classes.icon} />;\n        const itemBadge = this.navBadge(item.badge);\n        const attributes = item.attributes || {};\n        return (\n            <NavItem key={key} className={classes.item}>\n                {attributes.disabled ? (\n                    <RsNavLink\n                        href={''}\n                        className={classes.link}\n                        {...attributes}\n                    >\n                        {itemIcon}\n                        {item.name}\n                        {itemBadge}\n                    </RsNavLink>\n                ) : this.isExternal(url) ? (\n                    <RsNavLink\n                        href={url}\n                        className={classes.link}\n                        active\n                        {...attributes}\n                    >\n                        {itemIcon}\n                        {item.name}\n                        {itemBadge}\n                    </RsNavLink>\n                ) : (\n                    <NavLink\n                        to={url}\n                        className={classes.link + ' text-uppercase'}\n                        activeClassName=\"active\"\n                        onClick={this.hideMobile}\n                        {...attributes}\n                    >\n                        {itemIcon}\n                        {item.name}\n                        {itemBadge}\n                    </NavLink>\n                )}\n            </NavItem>\n        );\n    }\n    dropdownLink(item, key, classes) {\n        const itemIcon = <i className={classes.icon} />;\n        const itemBadge = this.navBadge(item.badge);\n        const attributes = item.attributes || {};\n        return item.title ? (\n            <DropdownItem\n                key={key}\n                header\n                tag=\"div\"\n                className=\"text-center\"\n                {...attributes}\n            >\n                <strong>{item.name}</strong>\n            </DropdownItem>\n        ) : (\n            <DropdownItem key={key}>\n                {itemIcon}\n                {item.name}\n                {itemBadge}\n            </DropdownItem>\n        );\n    }\n    render() {\n        // eslint-disable-next-line\n        const {\n            navs,\n            rightNavs,\n            showToggle,\n        } = this.props;\n        const openAside = this.props.processes.length > 0;\n        return (\n            <React.Fragment>\n                <AppSidebarToggler className=\"d-lg-none\" display=\"md\" mobile />\n                <AppNavbarBrand\n                    full={{\n                        src: logo,\n                        width: 89,\n                        height: 25,\n                        alt: 'CoreUI Logo',\n                    }}\n                    minimized={{\n                        src: sygnet,\n                        width: 30,\n                        height: 30,\n                        alt: 'CoreUI Logo',\n                    }}\n                />\n                <AppSidebarToggler className=\"d-md-down-none\" display=\"lg\" />\n\n                <Nav className=\"d-md-down-none\" navbar>\n                    {navs &&\n                        navs.map((item, index) => {\n                            const classes = {\n                                item: classNames(item.class),\n                                link: classNames(\n                                    'nav-link',\n                                    item.variant\n                                        ? `nav-link-${item.variant}`\n                                        : ''\n                                ),\n                            };\n                            return this.navLink(item, index, classes);\n                        })}\n                </Nav>\n                <Nav className=\"ml-auto\" navbar>\n                    {rightNavs &&\n                        rightNavs\n                            .filter(item => item.type !== 'dropdown')\n                            .map((item, index) => {\n                                const classes = {\n                                    item: classNames('d-md-down-none'),\n                                    link: classNames(\n                                        'nav-link',\n                                        item.variant\n                                            ? `nav-link-${item.variant}`\n                                            : ''\n                                    ),\n                                    icon: classNames('nav-icon', item.icon),\n                                };\n                                return this.navLink(item, index, classes);\n                            })}\n                    {rightNavs &&\n                        rightNavs\n                            .filter(item => item.type === 'dropdown')\n                            .map((item, index) => {\n                                const dropdownItems =\n                                    item.children &&\n                                    item.children.map((item, index) => {\n                                        const classes = {\n                                            item: classNames('d-md-down-none'),\n                                            link: classNames(\n                                                'nav-link',\n                                                item.variant\n                                                    ? `nav-link-${item.variant}`\n                                                    : ''\n                                            ),\n                                            icon: classNames(item.icon),\n                                        };\n                                        return this.dropdownLink(\n                                            item,\n                                            index,\n                                            classes\n                                        );\n                                    });\n                                return (\n                                    <AppHeaderDropdown\n                                        key={index}\n                                        direction=\"down\"\n                                    >\n                                        <DropdownToggle nav>\n                                            <img\n                                                src={item.avatar}\n                                                className=\"img-avatar\"\n                                                alt=\"Avatar\"\n                                            />\n                                        </DropdownToggle>\n                                        <DropdownMenu\n                                            right\n                                            style={{ right: 'auto' }}\n                                        >\n                                            {dropdownItems}\n                                        </DropdownMenu>\n                                    </AppHeaderDropdown>\n                                );\n                            })}\n                </Nav>\n                {showToggle && (\n                    <AppAsideToggler\n                        defaultOpen={openAside}\n                        className=\"d-md-down-none\"\n                    >\n                        <i className=\"icon-layers\" />\n                    </AppAsideToggler>\n                )}\n            </React.Fragment>\n        );\n    }\n}\n\nDefaultHeader.propTypes = propTypes;\nDefaultHeader.defaultProps = defaultProps;\n\nexport default DefaultHeader;\n"],"sourceRoot":""}