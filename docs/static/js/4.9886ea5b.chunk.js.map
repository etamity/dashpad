{"version":3,"sources":["common/assets/img/brand/logo.svg","common/assets/img/brand/dashboard.svg","common/components/AppNavbarBrand/AppNavbarBrand.js","common/components/AppNavbarBrand/index.js","common/containers/DefaultLayout/DefaultHeader.js"],"names":["module","exports","__webpack_require__","p","AppNavbarBrand","brand","src","width","height","alt","props","classBrand","key","react_default","a","createElement","this","imgSrc","imgWidth","imgHeight","imgAlt","className","toString","_this$props","children","Tag","tag","logoName","attributes","Object","objectWithoutProperties","classes","classNames","img","push","navbarBrandImg","length","full","minimized","defaultLogo","Fragment","assign","Component","defaultProps","DefaultHeader","badge","class","Badge","color","variant","text","url","substring","item","itemIcon","icon","itemBadge","navBadge","NavItem","disabled","NavLink","href","link","name","isExternal","active","es_NavLink","to","activeClassName","onClick","hideMobile","title","DropdownItem","header","_this","navs","rightNavs","showToggle","openAside","processes","es","display","mobile","components_AppNavbarBrand","logo","sygnet","Nav","navbar","map","index","concat","navLink","filter","type","dropdownItems","dropdownLink","direction","DropdownToggle","nav","avatar","DropdownMenu","right","style","defaultOpen"],"mappings":"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","file":"static/js/4.9886ea5b.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.a6e7530e.svg\";","module.exports = __webpack_public_path__ + \"static/media/dashboard.8f62be06.svg\";","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\n\nconst propTypes = {\n    tag: PropTypes.oneOfType([PropTypes.func, PropTypes.string]),\n    children: PropTypes.node,\n    className: PropTypes.string,\n    logoName: PropTypes.string,\n    brand: PropTypes.any,\n    full: PropTypes.any,\n    minimized: PropTypes.any,\n};\n\nconst defaultProps = {\n    tag: 'a',\n};\n\nclass AppNavbarBrand extends Component {\n    imgSrc(brand) {\n        return brand.src ? brand.src : '';\n    }\n\n    imgWidth(brand) {\n        return brand.width ? brand.width : 'auto';\n    }\n\n    imgHeight(brand) {\n        return brand.height ? brand.height : 'auto';\n    }\n\n    imgAlt(brand) {\n        return brand.alt ? brand.alt : '';\n    }\n\n    navbarBrandImg(props, classBrand, key) {\n        return (\n            <img\n                src={this.imgSrc(props)}\n                width={this.imgWidth(props)}\n                height={this.imgHeight(props)}\n                alt={this.imgAlt(props)}\n                className={classBrand}\n                key={key.toString()}\n            />\n        );\n    }\n\n    render() {\n        const {\n            className,\n            children,\n            tag: Tag,\n            logoName,\n            ...attributes\n        } = this.props;\n        const classes = classNames(className, 'navbar-brand');\n\n        const img = [];\n        if (this.props.brand) {\n            const props = this.props.brand;\n            const classBrand = 'navbar-brand';\n            img.push(this.navbarBrandImg(props, classBrand, img.length + 1));\n        }\n        if (this.props.full) {\n            const props = this.props.full;\n            const classBrand = 'navbar-brand-full';\n            img.push(this.navbarBrandImg(props, classBrand, img.length + 1));\n        }\n        if (this.props.minimized) {\n            const props = this.props.minimized;\n            const classBrand = 'navbar-brand-minimized';\n            img.push(this.navbarBrandImg(props, classBrand, img.length + 1));\n        }\n        const defaultLogo = (\n            <>\n                {img}\n                <h5> {logoName} </h5>\n            </>\n        );\n\n        return (\n            <Tag {...attributes} className={classes}>\n                {children || defaultLogo}\n            </Tag>\n        );\n    }\n}\n\nAppNavbarBrand.propTypes = propTypes;\nAppNavbarBrand.defaultProps = defaultProps;\n\nexport default AppNavbarBrand;\n","import AppNavbarBrand from './AppNavbarBrand';\n\nexport default AppNavbarBrand;\n","import React, { Component } from 'react';\nimport classNames from 'classnames';\nimport {\n    Badge,\n    DropdownItem,\n    DropdownMenu,\n    DropdownToggle,\n    Nav,\n    NavItem,\n    NavLink as RsNavLink,\n} from 'reactstrap';\nimport PropTypes from 'prop-types';\nimport { NavLink } from 'react-router-dom';\nimport {\n    AppAsideToggler,\n    AppHeaderDropdown,\n    AppSidebarToggler,\n} from '@coreui/react';\nimport logo from '../../assets/img/brand/logo.svg';\nimport sygnet from '../../assets/img/brand/dashboard.svg';\nimport AppNavbarBrand from 'common/components/AppNavbarBrand';\n\nconst propTypes = {\n    children: PropTypes.node,\n    navs: PropTypes.array,\n};\n\nconst defaultProps = {\n    processes: [],\n};\n\nclass DefaultHeader extends Component {\n    navBadge(badge) {\n        if (badge) {\n            const classes = classNames(badge.class);\n            return (\n                <Badge className={classes} color={badge.variant}>\n                    {badge.text}\n                </Badge>\n            );\n        }\n        return null;\n    }\n    isExternal(url) {\n        const link = url ? url.substring(0, 4) : '';\n        return link === 'http';\n    }\n    navLink(item, key, classes) {\n        const url = item.url || '';\n        const itemIcon = <i className={classes.icon} />;\n        const itemBadge = this.navBadge(item.badge);\n        const attributes = item.attributes || {};\n        return (\n            <NavItem key={key} className={classes.item}>\n                {attributes.disabled ? (\n                    <RsNavLink\n                        href={''}\n                        className={classes.link}\n                        {...attributes}\n                    >\n                        {itemIcon}\n                        {item.name}\n                        {itemBadge}\n                    </RsNavLink>\n                ) : this.isExternal(url) ? (\n                    <RsNavLink\n                        href={url}\n                        className={classes.link}\n                        active\n                        {...attributes}\n                    >\n                        {itemIcon}\n                        {item.name}\n                        {itemBadge}\n                    </RsNavLink>\n                ) : (\n                    <NavLink\n                        to={url}\n                        className={classes.link + ' text-uppercase'}\n                        activeClassName=\"active\"\n                        onClick={this.hideMobile}\n                        {...attributes}\n                    >\n                        {itemIcon}\n                        {item.name}\n                        {itemBadge}\n                    </NavLink>\n                )}\n            </NavItem>\n        );\n    }\n    dropdownLink(item, key, classes) {\n        const itemIcon = <i className={classes.icon} />;\n        const itemBadge = this.navBadge(item.badge);\n        const attributes = item.attributes || {};\n        return item.title ? (\n            <DropdownItem\n                key={key}\n                header\n                tag=\"div\"\n                className=\"text-center\"\n                {...attributes}\n            >\n                <strong>{item.name}</strong>\n            </DropdownItem>\n        ) : (\n            <DropdownItem key={key}>\n                {itemIcon}\n                {item.name}\n                {itemBadge}\n            </DropdownItem>\n        );\n    }\n    render() {\n        // eslint-disable-next-line\n        const { navs, rightNavs, showToggle } = this.props;\n        const openAside = this.props.processes.length > 0;\n        return (\n            <React.Fragment>\n                <AppSidebarToggler className=\"d-lg-none\" display=\"md\" mobile />\n                <AppNavbarBrand\n                    logoName=\"DASHPAD\"\n                    full={{\n                        src: logo,\n                        width: 45,\n                        height: 30,\n                        alt: 'Dashpad Logo',\n                    }}\n                    minimized={{\n                        src: sygnet,\n                        width: 30,\n                        height: 30,\n                        alt: 'Dashpad Logo',\n                    }}\n                />\n                <AppSidebarToggler className=\"d-md-down-none\" display=\"lg\" />\n\n                <Nav className=\"d-md-down-none\" navbar>\n                    {navs &&\n                        navs.map((item, index) => {\n                            const classes = {\n                                item: classNames(item.class),\n                                link: classNames(\n                                    'nav-link',\n                                    item.variant\n                                        ? `nav-link-${item.variant}`\n                                        : ''\n                                ),\n                            };\n                            return this.navLink(item, index, classes);\n                        })}\n                </Nav>\n                <Nav className=\"ml-auto\" navbar>\n                    {rightNavs &&\n                        rightNavs\n                            .filter(item => item.type !== 'dropdown')\n                            .map((item, index) => {\n                                const classes = {\n                                    item: classNames('d-md-down-none'),\n                                    link: classNames(\n                                        'nav-link',\n                                        item.variant\n                                            ? `nav-link-${item.variant}`\n                                            : ''\n                                    ),\n                                    icon: classNames('nav-icon', item.icon),\n                                };\n                                return this.navLink(item, index, classes);\n                            })}\n                    {rightNavs &&\n                        rightNavs\n                            .filter(item => item.type === 'dropdown')\n                            .map((item, index) => {\n                                const dropdownItems =\n                                    item.children &&\n                                    item.children.map((item, index) => {\n                                        const classes = {\n                                            item: classNames('d-md-down-none'),\n                                            link: classNames(\n                                                'nav-link',\n                                                item.variant\n                                                    ? `nav-link-${item.variant}`\n                                                    : ''\n                                            ),\n                                            icon: classNames(item.icon),\n                                        };\n                                        return this.dropdownLink(\n                                            item,\n                                            index,\n                                            classes\n                                        );\n                                    });\n                                return (\n                                    <AppHeaderDropdown\n                                        key={index}\n                                        direction=\"down\"\n                                    >\n                                        <DropdownToggle nav>\n                                            <img\n                                                src={item.avatar}\n                                                className=\"img-avatar\"\n                                                alt=\"Avatar\"\n                                            />\n                                        </DropdownToggle>\n                                        <DropdownMenu\n                                            right\n                                            style={{ right: 'auto' }}\n                                        >\n                                            {dropdownItems}\n                                        </DropdownMenu>\n                                    </AppHeaderDropdown>\n                                );\n                            })}\n                </Nav>\n                {showToggle && (\n                    <AppAsideToggler\n                        defaultOpen={openAside}\n                        className=\"d-md-down-none\"\n                    >\n                        <i className=\"icon-layers\" />\n                    </AppAsideToggler>\n                )}\n            </React.Fragment>\n        );\n    }\n}\n\nDefaultHeader.propTypes = propTypes;\nDefaultHeader.defaultProps = defaultProps;\n\nexport default DefaultHeader;\n"],"sourceRoot":""}